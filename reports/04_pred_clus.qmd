---
title: "Predator clusters"
format:
  html:
    code-fold: true
    toc: true
editor: visual
output-dir: "docs"
bibliography: references.bib
---

```{r}
#| label: setup
#| include: false

library(cluster)
library(ggmosaic)
library(ggtree)
library(sf)
library(targets)
library(tidyverse)
library(vegan)

tar_load(c("predators_stations", "predators_abundant", 
           "sightings_clust", "sightings_mtx", "sightings_dist", 
           "zoop_sf"), 
         store = here::here("_targets"))
source(here::here("R", "sp.R"))
source(here::here("R", "zoop.R"))
```

## Predator clusters

Following the methods of Dietrich et al. (2021), clustering analysis is restricted to species sighted near 5% or more of stations. This avoids granting undue leverage to rare species. `r n_distinct(predators_abundant$species)` species retained (i.e., species above red line).

```{r}
#| label: abundant_predators

total_stations <- n_distinct(zoop_sf$amlr.station)
pred_frac <- predators_stations %>%
  as_tibble() %>% 
  group_by(amlr.station, species) %>% 
  summarize(count = sum(count), .groups = "drop") %>%
  group_by(species) %>%
  summarize(stations_present = n(),
            station_frac = stations_present / total_stations,
            .groups = "drop") %>%
  arrange(desc(station_frac))
cutoff_row <- sum(pred_frac$station_frac >= 0.05)
  
frac_fn <- scales::label_percent(accuracy = 0.1)
pred_frac %>% 
  set_names(c("Species", "Stations", "Fraction")) %>% 
  mutate(Fraction = frac_fn(Fraction)) %>% 
  knitr::kable(align = "lrr") %>% 
  kableExtra::kable_styling("striped",
                            full_width = FALSE) %>% 
  kableExtra::row_spec(cutoff_row, 
                       extra_css = "border-bottom: 2px dashed red")

```

Hierarchical clustering of stations by predator community. Chose 5 clusters a priori to match Dietrich et al. (2021). Note: `r nrow(zoop_sf)` stations were included in the zooplankton clustering, but only `r length(sightings_clust$labels)` stations were used for predator clustering.

```{r}
#| label: predator_dendro

# Cut predators into five clusters
clust <- cutree(sightings_clust, 5)
g <- split(names(clust), clust)
p <- ggtree(sightings_clust, hang = -1)
pred_clust_mrca <- sapply(g, function(n) MRCA(p, n))

p %>% 
  groupClade(pred_clust_mrca, group_name = "Predator cluster") + 
  aes(color = `Predator cluster`) +
  layout_dendrogram() +
  theme_dendrogram()
```

How do the predator clusters compare to the zooplankton clusters?

```{r}
#| label: predator_mosaic
#| warning: false

# Join with zooplankton clusters
both_clust <- zoop_sf %>% 
  transmute(amlr.station, 
            zoop_clust = factor(`Winter Cluster factor`)) %>% 
  right_join(tibble(amlr.station = names(clust),
                    pred_clust = factor(clust)),
             by = "amlr.station")

# Mosaic plot
cluster_pal = c(`1` = "#96B687",
                `2a` = "#9CB2C8",
                `2b` = "#CAB3CC",
                `3a` = "#D29A97",
                `3b` = "#E8AD5C")
ggplot(both_clust) +
  geom_mosaic(aes(x = product(zoop_clust, pred_clust), 
                  fill = zoop_clust)) +
  geom_mosaic_text(aes(x = product(zoop_clust, pred_clust),
                       label = after_stat(.wt)),
                   as.label = TRUE) +
  scale_fill_manual(values = cluster_pal) +
  labs(x = "Predator cluster",
       y = "Zooplankton cluster",
       fill = "Zooplankton cluster") +
  theme_classic()
```

The above mosaic plot shows the distribution of stations by predator and zooplankton clusters. For example, the bottom left rectangle indicates 9 stations were assigned to zooplankton cluster 1 and predator cluster 1. Rectangles color-coded by zooplankton cluster using the color palette from Dietrich et al. 2021 Fig 3a.

Upon visual inspection of the mosaic plot, I don't perceive any clear correlations between the zooplankton and predator cluster assignments. I tested the strength of the relationship between the two cluster assignments through simulation of the Rand index (RI). RI is a measure of similarity between two clusterings ranging from 0 (no agreement) to 1 (total agreement). The histogram below shows the distribution of RI values when the cluster assignments were randomly shuffled 100,000 times. The vertical red line is the observed RI value.

```{r}
#| label: randindex

set.seed(1311)

expected_ri <- replicate(
  100000,
  aricode::RI(
    sample(both_clust$zoop_clust, nrow(both_clust)),
    sample(both_clust$pred_clust, nrow(both_clust))
  )
)

observed_ri <- aricode::RI(both_clust$zoop_clust, both_clust$pred_clust)

ri_pval <- sum(expected_ri > observed_ri) / 100000

ggplot(tibble(`Rand index` = expected_ri), aes(`Rand index`)) +
  geom_histogram(binwidth = 0.001) +
  geom_vline(xintercept = observed_ri, color = "red") +
  theme_classic()

```

Based on this simulation, the correlation between the zooplankton and predator assignments *is* significant (p = `r as.character(ri_pval)`). But I haven't figured out how to assess effect size yet, which I imagine is small.

## Indicator species

Which species best represent each cluster? Using Dufrene-Legendre indicator species analysis. Apply indicator value cutoff at 25%.

```{r}
#| label: indicator_species

species_wide <- predators_abundant %>% 
  pivot_wider(names_from = species,
              values_from = count,
              values_fill = 0) %>% 
  column_to_rownames("amlr.station")
cluster_indval <- labdsv::indval(species_wide, clust)
indval_mtx <- cluster_indval$indval
indval_fmt <- apply(indval_mtx, 2, function(x) {
  ord <- order(x, decreasing = TRUE)
  result <- ifelse(x >= 0.25, 
         str_glue("{rownames(indval_mtx)} ({round(x * 100)}%)"),
         NA) %>% 
    `[`(ord) %>% 
    na.omit() %>% 
    paste(collapse = "<br>")
  ifelse(result == "", "None", result)
})
as_tibble(t(indval_fmt)) %>% 
  knitr::kable(format = "html", escape = FALSE) %>% 
  kableExtra::kable_styling()

```

According to the 25% cutoff, clusters 1 and 4 lack indicator species. In agreement, every species' highest indicator value falls in clusters 2, 3, or 5. This suggests to me 5 clusters is a poor choice for the predators and we should use fewer. I'll calculate the gap statistic for the hierarchical cluster analysis to quantitatively choose a data-informed number of clusters and repeat this entire analysis. For now, continuing with 5 clusters.

I don't know enough about the Antarctic Peninsula megafauna to say whether the indicator species cluster together logically. The fulmarine/*Daption* petrels are split across Clusters 2 and 3. Cluster 2 lumps Cape Petrel and Antarctic Fulmar with the prion-like Blue Petrel. Cluster 3 combines the fulmarine Antarctic and Snow Petrels with the Kerguelen Petrel and fur seals. Cluster 5 seems to have the most ice-associated species (phocids and Adelie penguins).

## Cluster maps

What geospatial patterns do we see in the predator clusters? Cluster 5 is mostly found in the Bransfield Strait, which makes sense for the Adelie Penguin-crabeater seal-leopard seal complex. Cluster 2 (Antarctic Fulmar, Cape Petrel, and Blue Petrel) tends to show up oceanward of the South Shetland Islands. Cluster 3 (fur seal, snow petrel, Kerguelen petrel, and Antarctic Petrel) seems the most variable; found both inside and outside the Strait depending on the year.

```{r}
#| label: cluster_maps

pred_clust_sf <- tibble(amlr.station = names(clust),
                        pred_clust = factor(clust)) %>% 
  left_join(select(zoop_sf,
                   amlr.station,
                   geometry,
                   Year),
            by = "amlr.station") %>% 
  st_as_sf() %>% 
  st_transform(ant_proj())

map_lim <- st_bbox(pred_clust_sf) %>% 
  project_bbox() %>% 
  expand_bbox(factor = 1.2)

ant_basemap(map_lim) +
  geom_sf(aes(color = pred_clust), pred_clust_sf, size = 2, shape = 15) +
  facet_wrap(~ Year) +
  scale_x_continuous(breaks = c(-60, -55)) +
  scale_y_continuous(breaks = c(-63, -62, -61, -60)) +
  coord_ant(map_lim) +
  theme(legend.position = "bottom")
```

## Optimal number of clusters

We use the gap statistic [@tibshirani2001] to choose the optimal number of clusters ($k$). The gap statistic ($f$) is a goodness of clustering measure. The authors recommended choosing the smallest $k$ such that $f(k) \geq f(k+1) - s(k+1)$ where $s$ is the standard error of $f$. According to this rule, the predators are best described by two clusters (indicated in blue). However, $f(2)$ is only slightly greater than $f(3)-s(3)$ and, because $s$ is estimated by bootstrapping, sometimes re-running the gap statistic estimate yields an optimum at $k=3$ instead. An alternative rule suggests choosing the smallest $k$ such $f(k) \geq f_{max} - s_{max}$, where $f_{max}$ and $s_{max}$ are $f$ and $s$ at the first local maximum, respectively. In the figure below, $f_{max} - s_{max}$ is represented by the dashed red line, and the smallest $k$ greater than that threshold is $k=3$ (red).

```{r}
#| label: optimal-clusters

cluster_fn <- function(x, k) {
  bray_dist <- function(x) {
    vegdist(x, method = "bray")
  }
  list(cluster = cutree(hclust(bray_dist(x), method = "ward.D2"), k = k))
}
set.seed(931)
sightings_gap <- suppressWarnings(
  clusGap(sightings_mtx, 
                   FUN = cluster_fn,
                   K.max = 10, 
                   B = 500,
                   verbose = FALSE)
)
sightings_gap_df <- as_tibble(sightings_gap$Tab) %>% 
  mutate(
    k = seq_along(logW),
    is_optimum = case_when(
      k == maxSE(gap, SE.sim, method = "Tibs2001SEmax") ~ "tibsSEmax",
      k == maxSE(gap, SE.sim, method = "firstSEmax") ~ "firstSEmax",
      TRUE ~ "none"
  ))
kfirstmax <- with(
  sightings_gap_df,
  maxSE(gap, SE.sim, method = "firstmax")
)
ktibs <- with(sightings_gap_df, k[is_optimum == "tibsSEmax"])
firstSEmax_thr <- with(sightings_gap_df, gap[kfirstmax] - SE.sim[kfirstmax])
tibs_thr <- with(sightings_gap_df, gap[ktibs + 1] - SE.sim[ktibs + 1])
ggplot(sightings_gap_df, aes(x = k, y = gap)) +
  geom_line() +
  geom_pointrange(aes(ymin = gap - SE.sim, ymax = gap + SE.sim,
                      color = is_optimum)) +
  geom_segment(x = 3, xend = 4, 
               y = firstSEmax_thr, yend = firstSEmax_thr,
               color = "red",
               linetype = "dashed") +
  geom_segment(x = ktibs, xend = ktibs + 1, 
               y = tibs_thr, yend = tibs_thr,
               color = "blue",
               linetype = "dashed") +
  scale_color_manual(values = c(tibsSEmax = "blue",
                                firstSEmax = "red",
                                none = "black")) +
  theme_classic() +
  theme(legend.position = "none")
```

## 3-cluster analysis

Repeat the indicator species analysis and maps with three clusters.

```{r}
#| label: predator_dendro2

# Cut predators into 3 clusters
clust <- cutree(sightings_clust, 3)
g <- split(names(clust), clust)
p <- ggtree(sightings_clust, hang = -1)
pred_clust_mrca <- sapply(g, function(n) MRCA(p, n))

p %>% 
  groupClade(pred_clust_mrca, group_name = "Predator cluster") + 
  aes(color = `Predator cluster`) +
  layout_dendrogram() +
  theme_dendrogram()
```

```{r}
#| label: indicator_species2

species_wide <- pivot_wider(predators_abundant,
                            names_from = species,
                            values_from = count,
                            values_fill = 0) %>% 
  column_to_rownames("amlr.station")
cluster_indval <- labdsv::indval(species_wide, clust)
indval_mtx <- cluster_indval$indval
indval_fmt <- apply(indval_mtx, 2, function(x) {
  ord <- order(x, decreasing = TRUE)
  result <- ifelse(x >= 0.25, 
         str_glue("{rownames(indval_mtx)} ({round(x * 100)}%)"),
         NA) %>% 
    `[`(ord) %>% 
    na.omit() %>% 
    paste(collapse = "<br>")
  ifelse(result == "", "None", result)
})
as_tibble(t(indval_fmt)) %>% 
  knitr::kable(format = "html", escape = FALSE) %>% 
  kableExtra::kable_styling()
```

```{r}
#| label: cluster_maps2

pred_clust_sf <- tibble(amlr.station = names(clust),
                        pred_clust = factor(clust)) %>% 
  left_join(select(zoop_sf,
                   amlr.station,
                   geometry,
                   Year),
            by = "amlr.station") %>% 
  st_as_sf() %>% 
  st_transform(ant_proj())

map_lim <- st_bbox(pred_clust_sf) %>% 
  project_bbox() %>% 
  expand_bbox(factor = 1.2)

ant_basemap(map_lim) +
  geom_sf(aes(color = pred_clust), pred_clust_sf, size = 2, shape = 15) +
  facet_wrap(~ Year) +
  scale_x_continuous(breaks = c(-60, -55)) +
  scale_y_continuous(breaks = c(-63, -62, -61, -60)) +
  scale_color_brewer(palette = "Dark2") +
  coord_ant(map_lim) +
  theme(legend.position = "bottom")
```

## NMDS

How many NMDS axes should we use? Scree plot

```{r}
#| label: nmds-scree

nmds_stress <- tibble(
  k = 1:6,
  stress = map_dbl(k, function(k) {
    metaMDS(
      sightings_mtx, 
      distance = "bray",
      k = k,
      trymax = 100,
      trace = FALSE
    )$stress
  })
)

ggplot(nmds_stress, aes(k, stress)) +
  geom_line() +
  geom_point() +
  geom_hline(yintercept = c(0.2, 0.1, 0.05), linetype = "dotted") +
  scale_x_continuous(breaks = nmds_stress$k) +
  expand_limits(y = 0) +
  theme_classic()

```

3 axes for NMDS looks acceptable. How does ordination distance compare to dissimilarity (Shepard diagram)?

```{r}
#| label: nmds-shepard

sightings_nmds <- metaMDS(
  sightings_mtx, 
  distance = "bray",
  k = 3,
  trymax = 100,
  trace = FALSE
)

nmds_isoreg <- isoreg(sightings_nmds$diss, sightings_nmds$dist)

nmds_shepard <- tibble(
  diss = sightings_nmds$diss,
  dist = sightings_nmds$dist,
  mono = nmds_isoreg$yf
)

nmds_spear <- cor(nmds_shepard$diss,
                  nmds_shepard$dist,
                  method = "spearman")
nmds_label <- str_glue(
  "Non-metric fit, R^2 = {round(1 - sightings_nmds$stress^2, 3)}\n",
  "Linear fit, R^2 = {round(nmds_spear^2, 3)}\n",
  "k = {sightings_nmds$ndim}\n",
  "Stress = {round(sightings_nmds$stress, 3)}"
)

ggplot(nmds_shepard, aes(diss, dist)) +
  geom_point(size = 0.75, alpha = 0.1) +
  geom_line(aes(y = mono), color = "red") +
  annotate("text", x = 0.05, y = 2.9, label = nmds_label,
           hjust = 0, vjust = 1) +
  expand_limits(x = 0, y = 0) +
  labs(x = "Observed dissimilarity",
       y = "Ordination distance") +
  theme_classic()

```

NMDS plots, color-coded by predator cluster.

```{r}
#| label: loading

nmds_df <- sightings_nmds$points %>% 
  as_tibble(rownames = "amlr.station") %>% 
  rename_with(~ paste0("N", .x), starts_with("MDS")) %>% 
  right_join(tibble(amlr.station = names(clust),
                    pred_clust = factor(clust)),
             by = "amlr.station")

ggplot(nmds_df, aes(NMDS1, NMDS2)) +
  geom_point(aes(color = pred_clust)) +
  scale_color_brewer(palette = "Dark2") +
  theme_classic()

ggplot(nmds_df, aes(NMDS1, NMDS3)) +
  geom_point(aes(color = pred_clust)) +
  scale_color_brewer(palette = "Dark2") +
  theme_classic()

ggplot(nmds_df, aes(NMDS2, NMDS3)) +
  geom_point(aes(color = pred_clust)) +
  scale_color_brewer(palette = "Dark2") +
  theme_classic()
```
